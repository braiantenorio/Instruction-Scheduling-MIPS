package main;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.*;

import sym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\004" +
    "\000\002\004\005\000\002\005\004\000\002\005\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\007\006\000\002\010" +
    "\006\000\002\011\006\000\002\012\006\000\002\013\006" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\017\004\000\002" +
    "\017\004\000\002\017\005\000\002\017\003\000\002\017" +
    "\003\000\002\017\004\000\002\024\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\025\003\000" +
    "\002\025\003\000\002\022\010\000\002\022\010\000\002" +
    "\022\010\000\002\022\011\000\002\022\006\000\002\021" +
    "\010\000\002\021\010\000\002\021\003\000\002\023\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\006\007\006\010\007\001\002\000\004\002" +
    "\000\001\002\000\004\002\152\001\002\000\004\004\112" +
    "\001\002\000\004\004\014\001\002\000\006\002\uffff\010" +
    "\007\001\002\000\006\002\ufffe\007\006\001\002\000\004" +
    "\002\ufffc\001\002\000\004\002\ufffd\001\002\000\026\013" +
    "\026\014\015\015\020\016\034\017\033\020\024\021\031" +
    "\022\025\023\016\024\032\001\002\000\004\033\105\001" +
    "\002\000\004\033\102\001\002\000\032\002\uffea\007\uffea" +
    "\013\026\014\015\015\020\016\034\017\033\020\024\021" +
    "\031\022\025\023\016\024\032\001\002\000\004\033\072" +
    "\001\002\000\032\002\uffe6\007\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\001\002\000\004\004\071\001\002\000\004\004" +
    "\070\001\002\000\004\033\062\001\002\000\004\033\055" +
    "\001\002\000\004\006\054\001\002\000\004\004\053\001" +
    "\002\000\034\002\uffe5\004\052\007\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\001\002\000\004\033\045\001\002\000\006" +
    "\013\042\034\043\001\002\000\004\033\035\001\002\000" +
    "\004\004\uffd6\001\002\000\004\005\036\001\002\000\004" +
    "\033\037\001\002\000\004\005\040\001\002\000\004\034" +
    "\041\001\002\000\004\004\uffdd\001\002\000\004\004\uffde" +
    "\001\002\000\004\004\uffdf\001\002\000\004\004\uffd5\001" +
    "\002\000\004\005\046\001\002\000\004\033\047\001\002" +
    "\000\004\005\050\001\002\000\006\013\042\034\043\001" +
    "\002\000\004\004\uffdc\001\002\000\032\002\uffe4\007\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\001\002\000\032\002\uffe2" +
    "\007\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\001\002\000\034" +
    "\002\uffe3\004\uffe3\007\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\001\002\000\004\005\056\001\002\000\004\033\057\001" +
    "\002\000\004\005\060\001\002\000\006\013\042\034\043" +
    "\001\002\000\004\004\uffdb\001\002\000\004\005\063\001" +
    "\002\000\004\034\064\001\002\000\004\011\065\001\002" +
    "\000\004\033\066\001\002\000\004\012\067\001\002\000" +
    "\004\004\uffda\001\002\000\032\002\uffe1\007\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\001\002\000\032\002\uffe0\007\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\001\002\000\004\005\073" +
    "\001\002\000\004\033\074\001\002\000\004\005\075\001" +
    "\002\000\004\034\076\001\002\000\004\004\uffd7\001\002" +
    "\000\032\002\uffe9\007\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\001\002\000\034\002\uffe8\004\101\007\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\001\002\000\032\002\uffe7\007\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\001\002\000\004\005\103\001" +
    "\002\000\006\013\042\034\043\001\002\000\004\004\uffd9" +
    "\001\002\000\004\005\106\001\002\000\004\033\107\001" +
    "\002\000\004\005\110\001\002\000\004\033\111\001\002" +
    "\000\004\004\uffd8\001\002\000\004\013\117\001\002\000" +
    "\004\004\151\001\002\000\004\004\150\001\002\000\010" +
    "\002\ufff9\010\ufff9\013\ufff9\001\002\000\004\004\147\001" +
    "\002\000\004\006\126\001\002\000\004\004\125\001\002" +
    "\000\010\002\ufffb\010\ufffb\013\117\001\002\000\004\004" +
    "\123\001\002\000\010\002\ufff5\010\ufff5\013\ufff5\001\002" +
    "\000\010\002\ufffa\010\ufffa\013\ufffa\001\002\000\010\002" +
    "\ufff6\010\ufff6\013\ufff6\001\002\000\014\025\127\026\133" +
    "\027\132\030\130\031\131\001\002\000\004\032\143\001" +
    "\002\000\004\034\135\001\002\000\004\034\141\001\002" +
    "\000\004\034\135\001\002\000\004\034\135\001\002\000" +
    "\006\004\ufff2\005\136\001\002\000\006\004\uffeb\005\uffeb" +
    "\001\002\000\004\034\137\001\002\000\006\004\uffec\005" +
    "\uffec\001\002\000\006\004\ufff1\005\136\001\002\000\004" +
    "\004\uffef\001\002\000\006\004\ufff0\005\136\001\002\000" +
    "\006\004\uffed\005\uffed\001\002\000\006\004\ufff3\005\145" +
    "\001\002\000\004\032\146\001\002\000\006\004\uffee\005" +
    "\uffee\001\002\000\010\002\ufff4\010\ufff4\013\ufff4\001\002" +
    "\000\010\002\ufff7\010\ufff7\013\ufff7\001\002\000\010\002" +
    "\ufff8\010\ufff8\013\ufff8\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\012\002\004\003\003\004\007\016\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\012\001\001\000\004\004" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\016\020\020\021\026\022\022\023\021\024\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\076" +
    "\021\026\022\022\023\021\024\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\120\006\114\007\112\010\113" +
    "\011\117\012\121\013\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\123\007\112\010" +
    "\113\011\117\012\121\013\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\143\001\001\000\004\015\141" +
    "\001\001\000\002\001\001\000\004\015\137\001\001\000" +
    "\004\015\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error( Symbol cur_token ) {
        String msg  = "Syntax Error at line: " + (cur_token.left+1); 
        msg         += " col: " + (cur_token.right+1) + ".";
        report_error( msg, null );
    }
    public void unrecovered_syntax_error( Symbol cur_token ) throws java.lang.Exception {
        super.unrecovered_syntax_error( cur_token );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= mipsprogram 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MipsAbstractSyntax m = (MipsAbstractSyntax)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mipsprogram ::= datasection 
            {
              MipsAbstractSyntax RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataSection ds = (DataSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new MipsAbstractSyntax( ds ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mipsprogram",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mipsprogram ::= textsection 
            {
              MipsAbstractSyntax RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TextSection ts = (TextSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new MipsAbstractSyntax( ts ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mipsprogram",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mipsprogram ::= datasection textsection 
            {
              MipsAbstractSyntax RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataSection ds = (DataSection)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TextSection ts = (TextSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new MipsAbstractSyntax( ds, ts ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mipsprogram",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mipsprogram ::= textsection datasection 
            {
              MipsAbstractSyntax RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TextSection ts = (TextSection)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataSection ds = (DataSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new MipsAbstractSyntax( ds, ts ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mipsprogram",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // datasection ::= STARTDATA EOL data 
            {
              DataSection RESULT =null;
		int fulldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fulldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataSection fulld = (DataSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fulld; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datasection",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // data ::= data datadecl 
            {
              DataSection RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataSection ds = (DataSection)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataDecl dc = (DataDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        ds.addData( dc );
                        RESULT = ds;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // data ::= datadecl 
            {
              DataSection RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DataDecl dc = (DataDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        DataSection ds = new DataSection();
                        ds.addData( dc );
                        RESULT = ds;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("data",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // datadecl ::= dataasciiz EOL 
            {
              DataDecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataDecl d = (DataDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // datadecl ::= databyte EOL 
            {
              DataDecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataDecl d = (DataDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // datadecl ::= datahalfword EOL 
            {
              DataDecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataDecl d = (DataDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // datadecl ::= dataword EOL 
            {
              DataDecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataDecl d = (DataDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // datadecl ::= dataspace EOL 
            {
              DataDecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataDecl d = (DataDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datadecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dataasciiz ::= LABEL COLON DASCIIZ strlist 
            {
              DataDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> s = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DataDecl( lleft, lright, l, s, true ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataasciiz",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // databyte ::= LABEL COLON DBYTE immlist 
            {
              DataDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Long> list = (ArrayList<Long>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DataDecl( lleft, lright, l, list, 8 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("databyte",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // datahalfword ::= LABEL COLON DHALFWORD immlist 
            {
              DataDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Long> list = (ArrayList<Long>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DataDecl( lleft, lright, l, list, 16 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datahalfword",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dataword ::= LABEL COLON DWORD immlist 
            {
              DataDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Long> list = (ArrayList<Long>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DataDecl( lleft, lright, l, list, 32 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataword",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dataspace ::= LABEL COLON DSPACE IMM 
            {
              DataDecl RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long i = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DataDecl( lleft, lright, l, (int)i.longValue() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataspace",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // strlist ::= strlist COMMA STRLITERAL 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.add(s); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strlist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // strlist ::= STRLITERAL 
            {
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> l = new ArrayList<String>(); l.add(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strlist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // immlist ::= immlist COMMA IMM 
            {
              ArrayList<Long> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Long> list = (ArrayList<Long>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long i = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 list.add(i); RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("immlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // immlist ::= IMM 
            {
              ArrayList<Long> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long i = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Long> l = new ArrayList<Long>(); l.add(i); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("immlist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // textsection ::= STARTTEXT EOL textdata 
            {
              TextSection RESULT =null;
		int tdfullleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdfullright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TextSection tdfull = (TextSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tdfull; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textsection",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // textdata ::= textdata mipsinst 
            {
              TextSection RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TextSection td = (TextSection)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  td.addInstruction( i );
                        RESULT = td;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textdata",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // textdata ::= textdata labeldecl 
            {
              TextSection RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TextSection td = (TextSection)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  td.addLabel( l );
                        RESULT = td;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textdata",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // textdata ::= textdata labeldecl EOL 
            {
              TextSection RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TextSection td = (TextSection)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  td.addLabel( l );
                        RESULT = td;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textdata",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // textdata ::= mipsinst 
            {
              TextSection RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  TextSection t = new TextSection(); 
                        t.addInstruction( i );
                        RESULT = t;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textdata",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // textdata ::= labeldecl 
            {
              TextSection RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  TextSection t = new TextSection(); 
                        t.addLabel( l );
                        RESULT = t;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textdata",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // textdata ::= labeldecl EOL 
            {
              TextSection RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  TextSection t = new TextSection(); 
                        t.addLabel( l );
                        RESULT = t;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textdata",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // labeldecl ::= LABEL COLON 
            {
              Label RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new Label( lleft, lright, l, 0 );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeldecl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mipsinst ::= rinst EOL 
            {
              Instruction RESULT =null;
		int rileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int riright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RInstruction ri = (RInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ri; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mipsinst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mipsinst ::= iinst EOL 
            {
              Instruction RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IInstruction ii = (IInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ii; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mipsinst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // mipsinst ::= jinst EOL 
            {
              Instruction RESULT =null;
		int jileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		JInstruction ji = (JInstruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ji; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mipsinst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // imm_or_label ::= IMM 
            {
              Object RESULT =null;
		int immleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long imm = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = imm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imm_or_label",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // imm_or_label ::= LABEL 
            {
              Object RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = label; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("imm_or_label",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iinst ::= IOPER REG COMMA REG COMMA IMM 
            {
              IInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int immright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long imm = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new IInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   rs.intValue(),
                                                   rt.intValue(),
                                                   imm.longValue() );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iinst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // iinst ::= ILABELOPER REG COMMA REG COMMA imm_or_label 
            {
              IInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if( iol instanceof String ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       (String)iol );
                        } else if ( iol instanceof Long ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       ((Long)iol).longValue() );
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iinst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // iinst ::= IBRANCHOP REG COMMA REG COMMA imm_or_label 
            {
              IInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if( iol instanceof String ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       (String)iol );
                        } else if ( iol instanceof Long ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       rs.intValue(),
                                                       rt.intValue(),
                                                       ((Long)iol).longValue() );
                        }
                        if( RESULT == null ) System.err.println( "RESULT NOT SET" );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iinst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // iinst ::= IMEMOPER REG COMMA IMM LPAREN REG RPAREN 
            {
              IInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int immleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int immright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Long imm = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new IInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   rs.intValue(),
                                                   rt.intValue(),
                                                   imm.longValue() );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iinst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iinst ::= ISINGREGOP REG COMMA imm_or_label 
            {
              IInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if( iol instanceof String ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       0,
                                                       rt.intValue(),
                                                       (String)iol );
                        } else if ( iol instanceof Long ) {
                            RESULT = new IInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       0,
                                                       rt.intValue(),
                                                       ((Long)iol).longValue() );
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iinst",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rinst ::= ROPER REG COMMA REG COMMA REG 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer rd = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer rs = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   rs.intValue(),
                                                   rt.intValue(),
                                                   rd.intValue(),
                                                   0 );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rinst",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rinst ::= RSOPER REG COMMA REG COMMA IMM 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer rd = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer rt = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int shamtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int shamtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Long shamt = (Long)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   op.toUpperCase(),
                                                   0,
                                                   rt.intValue(),
                                                   rd.intValue(),
                                                   shamt.longValue() );
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rinst",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rinst ::= SYSCALL 
            {
              RInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new RInstruction( opleft,
                                                   opright,
                                                   "SYSCALL",
                                                   0,
                                                   0,
                                                   0,
                                                   0 );
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rinst",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // jinst ::= JOPER imm_or_label 
            {
              JInstruction RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        if( iol instanceof String ) {
                            RESULT = new JInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       (String)iol );
                        } else if ( iol instanceof Long ) {
                            RESULT = new JInstruction( opleft,
                                                       opright,
                                                       op.toUpperCase(),
                                                       ((Long)iol).longValue() );
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jinst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
